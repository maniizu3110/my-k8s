---
- name: Setup Kubernetes Cluster
  hosts: all
  become: yes
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  tasks:
    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Install packages needed for Kubernetes apt repository
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download and install Kubernetes signing key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg --yes

    - name: Add Kubernetes apt repository
      shell: |
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        allow_unauthenticated: yes
      notify:
        - Hold Kubernetes packages

    - name: Install containerd
      apt:
        name: containerd
        state: present

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Configure containerd
      shell: |
        containerd config default > /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

  handlers:
    - name: Hold Kubernetes packages
      command: apt-mark hold kubelet kubeadm kubectl

- name: Initialize Kubernetes Control Plane
  hosts: control-plane
  become: yes
  tasks:
    - name: Create .kube directory
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Generate init config file
      copy:
        dest: /home/ubuntu/.kube/init_config.yaml
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        content: |
          apiVersion: kubeadm.k8s.io/v1beta4
          bootstrapTokens:
          - description: kubeadm bootstrap token
            groups:
            - system:bootstrappers:kubeadm:default-node-token
            token: fff01f.08c0983df48d7541
            ttl: 24h0m0s
            usages:
            - signing
            - authentication
          kind: InitConfiguration
          localAPIEndpoint:
            advertiseAddress: 10.128.0.3
            bindPort: 6443
          nodeRegistration:
            criSocket: unix:///var/run/containerd/containerd.sock
            imagePullPolicy: IfNotPresent
            imagePullSerial: true
            name: k8s-control-plane
            taints:
            - effect: NoSchedule
              key: node-role.kubernetes.io/control-plane
          timeouts:
            controlPlaneComponentHealthCheck: 4m0s
            discovery: 5m0s
            etcdAPICall: 2m0s
            kubeletHealthCheck: 4m0s
            kubernetesAPICall: 1m0s
            tlsBootstrap: 5m0s
            upgradeManifests: 5m0s
          ---
          apiServer: {}
          apiVersion: kubeadm.k8s.io/v1beta4
          caCertificateValidityPeriod: 87600h0m0s
          certificateValidityPeriod: 8760h0m0s
          certificatesDir: /etc/kubernetes/pki
          clusterName: kubernetes
          controllerManager:
            extraArgs:
            - name: bind-address
              value: 0.0.0.0
          dns: {}
          encryptionAlgorithm: RSA-2048
          etcd:
            local:
              dataDir: /var/lib/etcd
          imageRepository: registry.k8s.io
          kind: ClusterConfiguration
          kubernetesVersion: v1.31.2
          networking:
            dnsDomain: cluster.local
            serviceSubnet: 10.96.0.0/12
          proxy: {}
          scheduler:
            extraArgs:
            - name: bind-address
              value: 0.0.0.0

    - name: Stop existing kubernetes services
      shell: |
        kubeadm reset -f
        systemctl stop kubelet
        systemctl stop docker || true
        systemctl stop containerd
        rm -rf /var/lib/etcd/*
        rm -rf /etc/kubernetes/manifests/*
      become: yes
      ignore_errors: yes

    - name: Restart containerd and kubelet
      systemd:
        name: "{{ item }}"
        state: restarted
        daemon_reload: yes
      with_items:
        - containerd
        - kubelet

    - name: Initialize kubeadm
      command: kubeadm init --config=/home/ubuntu/.kube/init_config.yaml --ignore-preflight-errors=all
      become: yes
      register: kubeadm_init

    - name: Copy kubeconfig to user's home
      shell: |
        cp -f /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown ubuntu:ubuntu /home/ubuntu/.kube/config
      become: yes

    - name: Install Helm
      shell: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      args:
        creates: /usr/local/bin/helm

    - name: Add Cilium Helm repo
      become: yes
      become_user: ubuntu
      shell: helm repo add cilium https://helm.cilium.io/

    - name: Install Cilium CNI
      become: yes
      become_user: ubuntu
      shell: helm install cilium cilium/cilium --namespace kube-system

    - name: Get join command
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: Store join command
      set_fact:
        join_command: "{{ join_command.stdout }}"

- name: Join Kubernetes Worker Nodes
  hosts: worker
  become: yes
  tasks:
    - name: Join worker node to cluster
      command: "{{ hostvars['k8s-control-plane']['join_command'] }}"